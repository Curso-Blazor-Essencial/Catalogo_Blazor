@page "/login"
@inject HttpClient http
@inject NavigationManager navigation
@inject TokenAuthenticationProvider authStateProvider

    <div class="continaer col-6">
        <Aviso Exibir="loginFalhou">
            <h5>@Mensagem</h5>
        </Aviso>
            <div class="card-body">
                <h5 class="card-title"> Login </h5>
                <EditForm Model="userinfo" OnValidSubmit="FazerLogin">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>Email</label>
                    <InputText class="form-control" @bind-Value="userinfo.Email"/>
                    <ValidationMessage For="@(()=> userinfo.Email)"/>
                    </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText class="form-control" @bind-Value="userinfo.Password" />
                    <ValidationMessage For="@(()=> userinfo.Password)" />
                </div>
                <br />
                <button type="submit" class="btn btn-outline-primary btn-sm"> Login </button>
                </EditForm>
            </div>
    </div>


@code {
    private UserInfo userinfo = new UserInfo();
    bool loginFalhou = false;

    [Parameter]
    public string Mensagem { get; set; }

    async Task FazerLogin()
    {
        try
        {
            var loginAsJson = JsonSerializer.Serialize(userinfo);
            var httpResponse = await http.PostAsync("api/account/login", new StringContent(loginAsJson, Encoding.UTF8, "application/json"));

            if (httpResponse.IsSuccessStatusCode)
            {
                var responseAsString = await httpResponse.Content.ReadAsStringAsync();

                var loginResult = JsonSerializer.Deserialize<UserToken>(responseAsString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                await authStateProvider.Login(loginResult.Token);
                navigation.NavigateTo("/");
            }
            else
            {
                loginFalhou = true;
                Mensagem = $"Não foi possível realizar o login do usuário. (Erro: {httpResponse.StatusCode})";
            }
        }
        catch (Exception)
        {
            
            loginFalhou = true;
                Mensagem = $"Algo de estranho ocorreu.";
            }
        }
   
    

}
