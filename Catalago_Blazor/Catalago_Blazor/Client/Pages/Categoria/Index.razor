@page "/categoria"
@inject HttpClient http
@using System.Text.Json

<form class="form-inline">
    <div class="form-group">
        <label for="filter-name" class="sr-only">Filtro</label>
        <input type="text" class="form-control mb-2 mr-sm-2" @bind="nomeFiltro" placeholder="Filtrar pelo nome" />
        <button type="button" class="btn btn-primary mb-2" @onclick=Filtrar>Filtrar</button>
        <button type="button" class="btn btn-danger mb-2" @onclick=LimparFiltro>Limpar</button>
    </div>
    <br />
</form>

<Confirm @ref="confirma" onCancela="@CancelaConfirm" onConfirm="@DeletaConfirm">
    <div>Deseja realmente excluir este item ?</div>
</Confirm>

@if (categorias == null)
{
    <p><em>Carregando...</em></p>
}
else if (categorias.Count == 0)
{
    <p><em>Não existem categorias cadastradas...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Categoria</th>
                <th>Descrição</th>
                <th>Edita</th>
                <th>Deleta</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var categoria in categorias)
            {
                <tr>
                    <td>@categoria.Nome</td>
                    <td>@categoria.Descricao</td>
                    <td><a class="btn btn-primary" href="categoria/edit/@categoria.CategoriaId">Editar</a> </td>
                    <td><a class="btn btn-danger" @onclick="@(()=> DeletarCategoria(categoria.CategoriaId))">Deletar</a> </td>
                </tr>
            }
        </tbody>
    </table>
}

<div>
    <a class="btn btn-success" href="categoria/create">Nova Categoria</a>
</div>



<hr />

<Paginacao QuantidadeTotalPaginas="QuantidadeTotalPaginas" paginaAtual="paginaAtual"
           Raio="2" PaginaSelecionada="PaginaSelecionada">

</Paginacao>


@code {

    List<Categoria> categorias { get; set; }

    private int QuantidadeTotalPaginas;
    private int paginaAtual = 1;
    private string nomeFiltro = string.Empty;

    Confirm confirma;

    protected override async Task OnInitializedAsync()
    {
        await CarregaCategorias();
    }

    private async Task Filtrar()
    {
        paginaAtual = 1;
        await CarregaCategorias();
    }

    private async Task LimparFiltro()
    {
        nomeFiltro = string.Empty;
        paginaAtual = 1;
        await CarregaCategorias();
    }

    private async Task PaginaSelecionada(int pagina)
    {
        paginaAtual = pagina;
        await CarregaCategorias(pagina);
    }

    async Task CarregaCategorias(int pagina = 1, int quantidadePorPagina = 5)
    {

        var httpResponse =
            await http.GetAsync($"api/categoria?pagina={pagina}&quantidadePorPagina={quantidadePorPagina}&nome={nomeFiltro}");

        if (httpResponse.IsSuccessStatusCode)
        {
            QuantidadeTotalPaginas =
                int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());

            var responseString = await httpResponse.Content.ReadAsStringAsync();

            categorias = JsonSerializer.Deserialize<List<Categoria>>(responseString,
                new JsonSerializerOptions()
                    {
                        PropertyNameCaseInsensitive = true
                    });
        }

        //categorias = await http.GetJsonAsync<Categoria[]>("/api/categoria");
    }

    int codigoCategoria;

    void DeletarCategoria(int categoriaId)
    {
        confirma.Exibir();
        codigoCategoria = categoriaId;
    }

    async Task DeletaConfirm()
    {
        await http.DeleteAsync($"api/categoria/{codigoCategoria}");
        confirma.Ocultar();
        await CarregaCategorias();
    }

    void CancelaConfirm()
    {
        confirma.Ocultar();
    }
}
